#!/usr/bin/python3
import time


def  find_factors(number, limit):
    status = "Time Out"
    start = time.time()
    endtime = start + limit
    divList = []
    quoList = []
    # we only need to use divisers up to the squareroot of number
    # Example 56 divide by 7 is 8. Both 7 and 8 are factors of 56. We do not need to compute 56 / 8.
    for div in range(2, 1 + int(number ** 0.5)):
        q, r = divmod(number, div)
        if not r:                   # if the remainder is zero
            divList.append(div)     # append the divisor to our results list
            quoList.append(q)       # append the quotient to the quotient list
        if time.time() > endtime:
            break
    else:
        status = "OK"

    # append the quotient list to the divisor list, as both list contain factors
    # But the quotient list is in reverse order to what we want, so we reverse it here
    divList.extend(quoList[::-1])   # [::-1] reverse the quotient list
    return divList


def get_multiples(num):
    num_factors = find_factors(num, 10.0)
    multiples = []
    multiples.append(num_factors[0])
    multiples.append(num_factors[-1])
    return multiples
